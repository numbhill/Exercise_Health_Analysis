# -*- coding: utf-8 -*-
"""Aron_Bazini_ML_Exercise_Health_Analysis

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nB8nq0HDubQS5hc3In65tLor3b3EodSI

# ***1. Install packages***
"""

# Commented out IPython magic to ensure Python compatibility.
# %%capture
# !pip install pingouin
# !pip install skimpy

"""# ***2. Load libraries***"""

# Data manipulation
#=========================================================================
import pandas as pd
import numpy as np

# Data visualization
#=========================================================================
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
from skimpy import skim

# Data preprocessing
#=========================================================================
from sklearn.preprocessing import StandardScaler

# Stats
#=========================================================================
import pingouin as pg
import statsmodels.api as sm
from statsmodels.stats.outliers_influence import variance_inflation_factor
from sklearn.pipeline import Pipeline
from sklearn.decomposition import PCA

# warnings
#=========================================================================
import warnings
warnings.filterwarnings('ignore')

"""# ***3. Load data***"""

data = pd.read_csv('/content/exercise_data.csv')

data.head()

"""# ***4. EDA***"""

skim(data)

"""*   Distribution of variables




"""

sns.set_style('darkgrid')
colors = sns.color_palette(palette = 'bright',
                           n_colors = len(data.columns))

fig,ax = plt.subplots(nrows = 1, ncols = 3, figsize = (9, 3.2))
ax = ax.flat

for i,feature in enumerate(data.columns):
    sns.kdeplot(data, x = feature, fill = True, color = colors[i], ax = ax[i])
    sns.histplot(data, x = feature, stat = 'density', fill = False, color = colors[i], ax = ax[i])
    ax[i].set_xlabel("")
    ax[i].set_title(f"{feature}\nSkew: {data[feature].skew():.2f}\nKurtosis: {data[feature].kurtosis():.2f}", fontsize = 10, fontweight = 'bold', color = 'black')
fig.suptitle("Distribution of variables", fontsize = 13, fontweight = 'bold', color = 'darkred')
fig.tight_layout()
fig.show()

"""*   Describe Stats


"""

data.describe().T

"""*   Q-Q Plots


"""

fig,ax = plt.subplots(nrows = 1, ncols = 3, figsize = (9, 3.2))
ax = ax.flat

for i,feature in enumerate(data.columns):
    sm.qqplot(data[feature], line = 'q', ax = ax[i])
    ax[i].set_title(feature, fontsize = 10, fontweight = 'bold', color = 'black')
fig.suptitle("Q-Q Plots", fontsize = 13, fontweight = 'bold', color = 'darkred')
fig.tight_layout()
fig.show()

"""

*   Normality test
"""

pg.normality(data)

"""

*   Correlation Plot

"""

g = sns.PairGrid(data,
                 palette = 'bright')

g.map_lower(sns.regplot, scatter_kws = {'s':3, 'color':'black'}, line_kws = {'color':'red'})
g.map_diag(sns.histplot, kde = True, line_kws = {'linewidth':2.5})
g.map_upper(sns.kdeplot, fill = True, cmap = 'mako')
g.fig.show()

"""

*   Correlation Matrix

"""

corr_matrix = data.corr(method = 'spearman')
mask = np.triu(np.ones_like(corr_matrix, dtype = bool))

fig,ax = plt.subplots(figsize = (7,3.5))
sns.heatmap(corr_matrix,
            cmap = 'coolwarm',
            annot = True,
            annot_kws = {'fontsize':10,
                         'fontweight':'bold'},
            linewidths = 1.2,
            square = True,
            mask = mask,
            ax = ax)
ax.set_xticklabels(ax.get_xticklabels(), rotation = 45, ha = 'right')
ax.set_title("Correlation Matrix", fontsize = 12, fontweight = 'bold', color = 'black')
fig.show()

"""

*   VIF

"""

df_vif = {}

for i,col in enumerate(data.columns):
    df_vif[col] = variance_inflation_factor(data, i)

df_vif = pd.DataFrame.from_dict(df_vif, orient = 'index')
df_vif = df_vif.rename(columns = {0:'vif'})
df_vif = df_vif.sort_values('vif', ascending = False)
df_vif.style.background_gradient(cmap = 'Blues')

"""

*   PCA
"""

data_copy = data.copy()

pipe = Pipeline(steps = [('scaler', StandardScaler()),
                         ('pca', PCA())])

data_pipe = pipe.fit_transform(data_copy)

fig,ax = plt.subplots(figsize = (9, 4.3))
ax.bar(x = list(range(1, len(data.columns)+1)),
       height = pipe.named_steps['pca'].explained_variance_ratio_,
       color = 'firebrick',
       edgecolor = 'black')


ax.plot(list(range(1, len(data.columns)+1)),
        pipe.named_steps['pca'].explained_variance_ratio_.cumsum() + 0.02,
        marker = 'o',
        color = 'gray',
        markerfacecolor = 'blue',
        markeredgecolor = 'black')
for i, (x, y) in enumerate(zip(range(1, len(data.columns) + 1), pipe.named_steps['pca'].explained_variance_ratio_.cumsum())):
    ax.text(x, y + 0.03, f'{y:.2f}', ha='center', va='bottom', fontweight = 'bold')

ax.set_ylim([0,1.1])
ax.set_ylabel("Cumulative variance percentage", fontsize = 10, fontweight = 'bold', color = 'black')
ax.set_xlabel("Principal Component", fontsize = 10, fontweight = 'bold', color = 'black')
ax.set_title("Percentage of cumulative explained variance", fontsize = 12, fontweight = 'bold', color = 'black')
fig.show()

loadings = pipe.named_steps['pca'].components_.T * np.sqrt(pipe.named_steps['pca'].explained_variance_ratio_)

fig = px.scatter(data_pipe, x=0, y=1)

for i, feature in enumerate(data.columns):
    fig.add_annotation(
        ax=0, ay=0,
        axref="x", ayref="y",
        x=loadings[i, 0],
        y=loadings[i, 1],
        showarrow=True,
        arrowsize=2,
        arrowhead=2,
        xanchor="right",
        yanchor="top"
    )
    fig.add_annotation(
        x=loadings[i, 0],
        y=loadings[i, 1],
        ax=0, ay=0,
        xanchor="center",
        yanchor="bottom",
        text=feature,
        yshift=5,
    )
fig.show()